{"type":"getPostById","data":{"title":"无耻的驱动加载法 (ZT)","date":"2024-03-24T12:43:58.000Z","description":"","categories":[],"tags":[],"content":"<link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css\"><p>转载自 <a href=\"http://www.blogjava.net/baicker/archive/2007/12/29/171537.html\">无耻的驱动加载法 (ZT)</a></p>\n<p>无耻的驱动加载法   from : http : <a href=\"//www.debugman.com/read.php?tid=614\">//www.debugman.com/read.php?tid=614</a></p>\n<p>方法一：&nbsp;替换 win32k . sys</p>\n<p>在 2k3 的系统下 ZwSetSystemInformation 禁止了用户模式下加载驱动，只允许 SMSS . exe 加载 win32k . sys。于是我们可以利用一下这个特点：<br>\n1.&nbsp; 注入 SMSS . EXE<br>\n2.&nbsp; 打开 SeLoadDriverPrivilege 权限<br>\n3.&nbsp; 把原始的 win32k . sys 改名<br>\n4.&nbsp; 复制我们的驱动到 \\systemroot\\system32 下<br>\n5.&nbsp; 在 SMSS . EXE 中加载 \\SystemRoot\\System32\\win32k . sys<br>\n6.&nbsp; 把 \\SystemRoot\\System32\\win32k . sys 改名<br>\n7.&nbsp; 把原始的 win32k . sys 文件改名改回去 `</p>\n<p>方法二：&nbsp;利用第三方驱动程序的漏洞</p>\n<p>这类驱动应该挺多的，我们可以选择一些装机量大的驱动来进行此项工作，如某某著名的杀毒软件即存在本地权限提升漏洞。。。获得了 ring0 权限再用 ZwSetSystemInformation 加载就万事大吉了</p>\n<p>方法三：&nbsp;感染随系统启动的驱动程序</p>\n<p>此法类似于病毒感染，但需要等到下次系统重启才能拿到控制权，需要一些 PE 知识，这个我就不多说了。</p>\n<p>这里顺便再说说通过 ZwSetSystemInformation 其实也是可以建立 Device 的，由于 ZwSetSystemInformation 加载驱动时传给 DriverEntry 的 DriverObject 指针是错误的，因此我们不能用它来创建 Device,&nbsp; 但我们可以自己分配一个 DriverObject 来创建，如下：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NTSTATUS   &nbsp;&nbsp;&nbsp;&nbsp;<span class=\"title function_\">DriverEntry</span>  <span class=\"params\">(IN&nbsp;PDRIVER_OBJECT&nbsp;DriverObject ,&nbsp;IN&nbsp;PUNICODE_STRING&nbsp;RegistryPath)</span>   &nbsp;&nbsp;&nbsp;&nbsp;{</span><br><span class=\"line\">    NTSTATUS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ntStatus&nbsp; =&nbsp; STATUS_SUCCESS ;</span><br><span class=\"line\">    UNICODE_STRING&nbsp;&nbsp;ntUnicodeString ;</span><br><span class=\"line\">    UNICODE_STRING&nbsp;&nbsp;ntWin32NameString ;</span><br><span class=\"line\">    PDEVICE_OBJECT&nbsp;&nbsp;deviceObject&nbsp; =&nbsp; <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    ULONG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i ; </span><br><span class=\"line\">    DriverObject&nbsp; =&nbsp; ExAllocatePoolWithTag ( NonPagedPool ,&nbsp; <span class=\"keyword\">sizeof</span> ( DRIVER_OBJECT ),&nbsp; <span class=\"string\">'clAS'</span> );&nbsp;&nbsp; </span><br><span class=\"line\">    <span class=\"comment\">//&nbsp;分配DriverObject </span></span><br><span class=\"line\">    RtlZeroMemory ( DriverObject ,&nbsp; <span class=\"keyword\">sizeof</span> ( DRIVER_OBJECT )); RtlInitUnicodeString (&nbsp;&amp; ntUnicodeString ,&nbsp; NT_DEVICE_NAME&nbsp; ); </span><br><span class=\"line\">    ntStatus&nbsp; =&nbsp; IoCreateDevice (&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">        DriverObject ,&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">        <span class=\"number\">0</span> ,   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">        &amp; ntUnicodeString ,&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">        <span class=\"number\">0x8800</span> ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//设备类型必须为自定义的&nbsp;</span></span><br><span class=\"line\">    FILE_DEVICE_SECURE_OPEN ,&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">    TRUE ,   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">    &amp; deviceObject&nbsp; ); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>&nbsp; (&nbsp;! NT_SUCCESS (&nbsp; ntStatus&nbsp; )&nbsp;)   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">        DbgPrint ( <span class=\"string\">\"Couldn't&nbsp;create&nbsp;the&nbsp;device&nbsp;object\\n\"</span> );&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&nbsp; ntStatus ;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span><br><span class=\"line\">        <span class=\"comment\">//&nbsp;注意，需要我们自己来清除INITIALIZING标志，否则设置不能打开</span></span><br><span class=\"line\">        ClearFlag (&nbsp; deviceObject -&gt; Flags ,&nbsp; DO_DEVICE_INITIALIZING&nbsp; );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">        DriverObject -&gt; MajorFunction [ IRP_MJ_CREATE ]&nbsp;=&nbsp; CreateClose ;</span><br><span class=\"line\">        DriverObject -&gt; MajorFunction [ IRP_MJ_CLOSE ]&nbsp;=&nbsp; CreateClose ; </span><br><span class=\"line\">        <span class=\"comment\">//&nbsp;注意，必须要给IRP_MJ_CLEANUP分派一个DispathRoutine,&nbsp;否则在设备关闭的时候就会挂</span></span><br><span class=\"line\">        DriverObject -&gt; MajorFunction [ IRP_MJ_CLEANUP ]&nbsp;=&nbsp; CreateClose ; </span><br><span class=\"line\">        DriverObject -&gt; MajorFunction [ IRP_MJ_DEVICE_CONTROL ]&nbsp;=&nbsp; DeviceControl ; </span><br><span class=\"line\">        <span class=\"comment\">//&nbsp;注意，必须是Global符号连接,&nbsp;否则程序退出后连接会消失</span></span><br><span class=\"line\">        RtlInitUnicodeString (&nbsp;&amp; ntWin32NameString ,&nbsp; L <span class=\"string\">\"\\\\DosDevices\\\\Global\\\\RkrTest\"</span>&nbsp; ); </span><br><span class=\"line\">        ntStatus&nbsp; =&nbsp; IoCreateSymbolicLink (   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">            &amp; ntWin32NameString ,&nbsp;&amp; ntUnicodeString&nbsp; ); </span><br><span class=\"line\">            <span class=\"keyword\">if</span>&nbsp; (&nbsp;! NT_SUCCESS (&nbsp; ntStatus&nbsp; )&nbsp;)   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">                DbgPrint (( <span class=\"string\">\"Couldn't&nbsp;create&nbsp;symbolic&nbsp;link\\n\"</span> ));&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">                IoDeleteDevice (&nbsp; deviceObject&nbsp; );   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">                } </span><br><span class=\"line\">                <span class=\"keyword\">return</span>&nbsp; ntStatus ;   &nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">                } </span><br></pre></td></tr></tbody></table></figure>\n<p>如果你高兴的话在分配空间的时候分配多一点，把 OBJECT_HEADER 也算上，这样可以避免某些软件扫描 DriverObject 的对象头时挂掉。相应的用 CreateFile 时打开时应像这样指定 “\\\\ . \\Global\\SymbolLink”  还有哪些无耻的办法大家可以讨论一下  `</p>\n","_path":"20240324/wu-chi-de-qu-dong-jia-zai-fa-zt/","_link":"https://yaoqs.github.io/20240324/wu-chi-de-qu-dong-jia-zai-fa-zt/","_id":"clzpq9hxr008tsger8a0thbts"}}