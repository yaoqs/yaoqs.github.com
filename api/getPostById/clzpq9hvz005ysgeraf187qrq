{"type":"getPostById","data":{"title":"ssh 专题","date":"2021-04-11T13:10:45.000Z","description":"","categories":[{"name":"专题","_id":"clzpq9hta001rsger1kx28gvd"}],"tags":[{"name":"专题","_id":"clzpq9hu0002xsgerfltn8246"},{"name":"ssh","_id":"clzpq9hz800b6sger3q3tcn82"}],"content":"<link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css\"><ol>\n<li>\n<p><a href=\"https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\">SSH 原理与运用（一）：远程登录</a></p>\n<p>作者：阮一峰</p>\n<p>Note:</p>\n<pre><code> 六、authorized_keys文件\n\n 远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。\n\n 这里不使用上面的ssh-copy-id命令，改用下面的命令，解释公钥的保存过程：\n\n 　　$ ssh user@host 'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub\n\n 这条命令由多个语句组成，依次分解开来看：（1）\"$ ssh user@host\"，表示登录远程主机；（2）单引号中的mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys，表示登录后在远程shell上执行的命令：（3）\"$ mkdir -p .ssh\"的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；（4）'cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub的作用是，将本地的公钥文件~/.ssh/id_rsa.pub，重定向追加到远程文件authorized_keys的末尾。\n\n 写入authorized_keys文件后，公钥登录的设置就完成了。\n</code></pre>\n</li>\n<li>\n<p><a href=\"https://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html\">SSH 原理与运用（二）：远程操作与端口转发</a></p>\n<p>作者：阮一峰</p>\n<p>Note:</p>\n<ul>\n<li>\n<p>SSH 不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。</p>\n</li>\n<li>\n<p>八、绑定本地端口</p>\n<p>既然 SSH 可以传送数据，那么我们可以让那些不加密的网络连接，全部改走 SSH 连接，从而提高安全性。</p>\n<p>假定我们要让 8080 端口的数据，都通过 SSH 传向远程主机，命令就这样写：</p>\n<pre><code>  ssh -D 8080 user@host\n</code></pre>\n<p>SSH 会建立一个 socket，去监听本地的 8080 端口。一旦有数据传向那个端口，就自动把它转移到 SSH 连接上面，发往远程主机。可以想象，如果 8080 端口原来是一个不加密端口，现在将变成一个加密端口。</p>\n</li>\n<li>\n<p>九、本地端口转发</p>\n<p>有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的 \"端口转发\"。为了区别后文的 \"远程端口转发\"，我们把这种情况称为 \"本地端口转发\"（Local forwarding）。</p>\n<p>假定 host1 是本地主机，host2 是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台 host3，可以同时连通前面两台主机。因此，很自然的想法就是，通过 host3，将 host1 连上 host2。</p>\n<p>我们在 host1 执行下面的命令：</p>\n<pre><code>  ssh -L 2121:host2:21 host3\n</code></pre>\n<p>命令中的 L 参数一共接受三个值，分别是 \"本地端口：目标主机：目标主机端口\"，它们之间用冒号分隔。这条命令的意思，就是指定 SSH 绑定本地端口 2121，然后指定 host3 将所有的数据，转发到目标主机 host2 的 21 端口（假定 host2 运行 FTP，默认端口为 21）。</p>\n<p>这样一来，我们只要连接 host1 的 2121 端口，就等于连上了 host2 的 21 端口。</p>\n<pre><code>  ftp localhost:2121\n</code></pre>\n<p>“本地端口转发 \"使得 host1 和 host3 之间仿佛形成一个数据传输的秘密隧道，因此又被称为\"SSH 隧道”。</p>\n<p>下面是一个比较有趣的例子。</p>\n<pre><code>  ssh -L 5900:localhost:5900 host3\n</code></pre>\n<p>它表示将本机的 5900 端口绑定 host3 的 5900 端口（这里的 localhost 指的是 host3，因为目标主机是相对 host3 而言的）。</p>\n<p>另一个例子是通过 host3 的端口转发，ssh 登录 host2。</p>\n<pre><code>  ssh -L 9001:host2:22 host3\n</code></pre>\n<p>这时，只要 ssh 登录本机的 9001 端口，就相当于登录 host2 了。</p>\n<pre><code>  ssh -p 9001 localhost\n</code></pre>\n<p>上面的 - p 参数表示指定登录端口。</p>\n</li>\n<li>\n<p>十、远程端口转发</p>\n<p>既然 \"本地端口转发\" 是指绑定本地端口的转发，那么 \"远程端口转发\"（remote forwarding）当然是指绑定远程端口的转发。</p>\n<p>还是接着看上面那个例子，host1 与 host2 之间无法连通，必须借助 host3 转发。但是，特殊情况出现了，host3 是一台内网机器，它可以连接外网的 host1，但是反过来就不行，外网的 host1 连不上内网的 host3。这时，\"本地端口转发\" 就不能用了，怎么办？</p>\n<p>解决办法是，既然 host3 可以连 host1，那么就从 host3 上建立与 host1 的 SSH 连接，然后在 host1 上使用这条连接就可以了。</p>\n<p>我们在 host3 执行下面的命令：</p>\n<pre><code>  ssh -R 2121:host2:21 host1\n</code></pre>\n<p>R 参数也是接受三个值，分别是 \"远程主机端口：目标主机：目标主机端口\"。这条命令的意思，就是让 host1 监听它自己的 2121 端口，然后将所有数据经由 host3，转发到 host2 的 21 端口。由于对于 host3 来说，host1 是远程主机，所以这种情况就被称为 \"远程端口绑定\"。</p>\n<p>绑定之后，我们在 host1 就可以连接 host2 了：</p>\n<pre><code>  ftp localhost:2121\n</code></pre>\n<p>这里必须指出，\"远程端口转发\" 的前提条件是，host1 和 host3 两台主机都有 sshD 和 ssh 客户端。</p>\n</li>\n<li>\n<p>十一、SSH 的其他参数</p>\n<p>SSH 还有一些别的参数，也值得介绍。</p>\n<p>N 参数，表示只连接远程主机，不打开远程 shell；T 参数，表示不为这个连接分配 TTY。这个两个参数可以放在一起用，代表这个 SSH 连接只用来传数据，不执行远程操作。</p>\n<pre><code>  ssh -NT -D 8080 host\n</code></pre>\n<p>f 参数，表示 SSH 连接成功后，转入后台运行。这样一来，你就可以在不中断 SSH 连接的情况下，在本地 shell 中执行其他操作。</p>\n<pre><code>  ssh -f -D 8080 host\n</code></pre>\n<p>要关闭这个后台连接，就只有用 kill 命令去杀掉进程</p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://wangdoc.com/ssh/\">SSH 教程</a> 作者：阮一峰 <a href=\"https://github.com/wangdoc/ssh-tutorial\">https://github.com/wangdoc/ssh-tutorial</a></p>\n</li>\n</ol>\n","_path":"20210411/ssh-zhuan-ti/","_link":"https://yaoqs.github.io/20210411/ssh-zhuan-ti/","_id":"clzpq9hvz005ysgeraf187qrq"}}